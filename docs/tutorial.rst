
.. Welcome!
.. As you can see, these are comments: they start with two dots and a space
.. Sphinx is very sensitive to spaces, empty lines, etc. so it can sometimes be frustrating
.. Two dots and a space are also used for special tagging, inclusion, etc.  Like here, where we are creating an internal link:

.. _about:

.. So, lets start writing the documentation
.. Title fonts are written like this:

Tutorial - start here
=====================

Well, this module does actually nothing.

It's a skeleton module that servers as a template for python3 projects:

.. Let's add an image.  Important note here: always when adding a tag with ".." remember to leave a blank line before it!

.. image:: images/skull.png
   :width: 10 %
   

.. nice rst reference: https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst

Some features:

  * Autogenerated documentation
  * Python packaging
  * Debian packaging
  * Development and production downloads from git
  * Uploading your package to PyPi
  * C++ extensions with SWIG
  * Lot's of useful ideas: library organization, hot-reload development using notebooks, etc.
  
.. _impatient:
  
For the impatient
-----------------

Let's suppose your name is *Janne Jantunen* and you have decided to create a new package named *your_package_name*.  Proceed like this:

::

    git clone https://github.com/elsampsa/skeleton
    mv skeleton your_package_name
    cd your_package_name
    bash/reinit.bash
    bash/setauthor.bash "Janne Jantunen"
    bash/setver.bash "0.1"

If you don't wan't the cpp extensions, edit ``setup.py`` & comment the cpp section away.

Finally, run this command:

::

    pip3 install --user -e .

This way your package is installed in the "editable mode" (that extra "-e").  It creates link from the python package directory (in linux, look for *$HOME/.local/lib/python3.x/site-packages/*.egg-link* files) 
to your local directory.  Now python's package system can find your module.

If you did not use the -e switch, it would simply create a copy of your code and place it into the python package directory and your future changes to the codebase would not
be updated.

Mod the documentation by editing .rst files in the "docs/" directory.  The idea is that you hide/delete this page ("tutorial.rst") from your own module.

After this you can re-compile and check the documentation with

::

    cd docs
    ./compile.bash
    firefox index.html
  
If you want to push your newly minted python project into a git repo, do:

::
  
    git init
    git remote add origin https://[your-personal-git-repository]/your_package_name.git
    git add *
    git commit -m "initial commit"
    git push -u origin master
    
Please note the file ``.gitignore`` for the files we do *not* want into our package.

The name of your package (that is also the name of your python module) should not contain "weird characters", i.e. ".,-" etc.

Git tags can be added with:
    
::

    git tag v1.2 -m "cool version v1.2"
    git push origin --tags

You can also user the ``bash/git_tag.bash`` script.
    
Now production users can install with pip3 certain revisions of the software (see :ref:`here <production>`)
        
  
Dependencies
------------

Edit the setup.py and there, the "install_requires" field.  This way, when installing your package with pip3, depencencies are automagically resolved.  
Keep them up to date also in the file *docs/snippets/requirements.txt*.


Files
-----

This page has been produced with the file "docs/tutorial.rst".  Go ahead and open it in your editor.  Open also "index.rst".  Edit them accordingly.  
Said that, let's take a closer look at the directory structure:

* your_package_name/ : This is a "scaffold" directory :

  ================   ===============================================================================================================================
  README.md          Readme file in online markdown format (nice for github). Play around with online markdown `here <https://stackedit.io/editor>`_
  LICENSE.*          License text (say, LICENSE.LGPL3, LICENSE.MIT, etc.)
  CHANGELOG          Recent changes in the code
  setup.py           Python setup script for creating packages
  MANIFEST.in        Used by setup.py
  .gitignore         Files ignored by git
  ================   ===============================================================================================================================
|
* your_package_name/bootstrap : System-specific install scripts

  Sometimes you just need to use that ``apt-get install`` for some base packages & other libraries your program package needs.
  It's a good practice to collect all those extra super-user commands into a separate script.  The ``ubuntu.bash`` in the bootstrap/ directory
  for example, installs build environment & swig that you need to install the cpp extensions.

|
* your_package_name/bash : Some helper scripts

  ================   ===============================================================================================================================
  changestr.bash     Helper script to change strings in your package
  setver.bash        Helper script to change the version of your package
  setauthor.bash     Helper script to change the author of the package
  reinit.bash        Reinitializes the package name
  cleanpy.bash       Removes __pycache__ directories and .pyc files; Do maybe before "git add ."
  upload.bash        Uploads your python package into PyPi
  test_upload.bash   Uploads your python package into PyPi test repository
  git_tag.bash       Pushes version information into git.  This script is modified by the setver.bash
  git_rm_tag.bash    Removes the version information (if you made an error)
  ================   ===============================================================================================================================
|
* your_package_name/docs/  : Documentation and autogenerated documentation lives here
  
  ================   ===============================================================================================================================
  index.html         Redirects to the autogenerated html [don't touch]
  index.rst          The main index start from here
  tutorial.rst       The file you are staring at the moment (or html version of it) 
  intro.rst          Introduction of the module
  requirements.rst   What the user needs in order to use this module 
  examples.rst       Copy-pastable examples for the api user 
  submodules.rst     Documentation generated automatically from source code.  Just add a new entry here for each submodule, don't touch otherwise 
  license.rst        Copyright and License 
  authors.rst        Who is the maintainer & author
  compile.bash       Run this always after modifying your documents / source code [don't edit]
  clean.bash         Clean autogenerated documentation [don't edit]
  conf.py            Sphinx configuration file.  **edit this and try different styles**
  .nojekyll          Dummy file.  This is needed for the on-line documentation to work with GitHub [don't touch]
  snippets/          Example snippet source files and scripts for generating pages from them.  Edit also the file requirements.txt here.
  generated/         Auto-generated documents [don't touch]
  ================   ===============================================================================================================================
|
* your_package_name/your_package_name : This is where the actual python module lives
  
  ================   ===============================================================================================================================
  __init__.py        Python module initialization
  greeters/          Submodule
  data/              Static data the module needs and that is included in the python package
  ================   ===============================================================================================================================
|
* your_package_name_cpp/ : A dummy c++ extension module with SWIG.

  ====================   ===============================================================================================================================
  compile.bash           stand-alone compilation command.  ``pip3 install`` compiles the package also.
  runswig.bash           stand-alone swig command.
  sharedmem.cpp          written by you
  sharedmem.h            written by you
  sharedmem.i            written by you
  sharedmem.py           generated by swig
  sharedmem_wrap.cpp     generated by swig
  ====================   ===============================================================================================================================
 
The scaffolding "double-directory" your_package_name/your_package_name structure might seem inconvenient, but it is necessary for packaging.  
Here is what we just did in the :ref:`For the impatient <impatient>` section:

It's time to start documenting!  Edit the files "docs/*.rst".  Here are `some nice tips <http://www.sphinx-doc.org/en/stable/rest.html>`_ 
for using Sphinx and here `are some more <http://www.sphinx-doc.org/en/stable/markup/inline.html>`_

To create and to recreate the docs (after changing the code, etc.), do (in the "docs/" directory):
  
::

  ./compile.bash
  
To see your documentation, launch

:: 

  firefox index.html
  

Online autodocumentation
------------------------
  
**Github users**
  
After creating the git repo, create also a site for your project like this:  Settings => GitHub pages => Source : master branch / docs folder => press Save.  Now your documentation is online in github! (don't forget to include the "docs/" folder into git).
    
**Gitlab users**
  
Using a generic service that uses a gitlab server?  No problem.  There is a simple hack to put the autodocs online.

  * In gitlab, create a wiki page for your project.  Write there the words "Hello world".  Next, clone the wiki repository (not *the* repository, just the *wiki repository*) with that button on the right that says "clone repository".
  * Edit your projects "docs/compile.bash".  Uncomment the options for Gitlab and set the directory of your wiki repository correctly.  Run "./compile.bash".  Now the whole documentation tree has been copied to your wiki repo directory.
  * In the wiki repo directory, open "home.md" in an editor.  Modify it to look like this:
  
  ::
  
    For documentation
    [click here](_build/html/index.html)
    
  * You still need to use git to add and push all the files to the wiki repository online (there are instructions in "compile.bash")


Organize with namespaces
------------------------

You can also organize your module under namespaces.  Read more about it `here <https://packaging.python.org/guides/packaging-namespace-packages/>`_.

Let's assume two modules

::

    namespace_subpackage1/
        setup.py            Remember that automatic package finder does not work for namespace packages
        etc.
        namespace/          Keep this directory empty
            subpackage1/        
                __init__.py
                submodule1
                submodule2
                
    
The other one being

::

    namespace_subpackage2/
        setup.py            Remember that automatic package finder does not work for namespace packages
        etc.
        namespace/          Keep this directory empty
            subpackage2/
                __init__.py
                submodule1
                submodule2
                
Once installed, the following works:

::

    from namespace.subpackage1 import something
    from namespace.subpackage2 import something_else
                

Code Organization
-----------------

This tutorial comes with a module that has a single submodule called "greeters" that is organized as follows:

.. remember: "|" forces line-breaks

greeters
  | __init__.py
  | base.py
  | fancy.py
  
The idea is that "base.py" has some base class definitions that are used bu "fancy.py" to create derived classes.  __init__.py has been tweaked so that user can import with

::

  from your_package_name.greeters import FancyHelloWorld


instead of the cumbersome

::

  from your_package_name.fancy.greeters import FancyHelloWorld
  
In general, use ``__init__.py`` only for exposing your API.  Do not write any classes or
methods therein.

The file ``cli.py`` is the command-line entry point for the whole application.  See in ``setup.py`` how
you can map a command into ``cli.py``.

``cli.py`` handles command-line parameters, user-specific config, logging and data files and their
default values.

``main.py`` should be the program itself.

Quick testing
-------------

Each module file under "greeters" works also as a stand-alone test.  Go to the "greeters" directory and try (either ipython or ipython3):

::
  
    ipython3
    %run fancy.py
    
Or just (either python or python3):

::

    python3 fancy.py


This is not proper testing, though.  It's quick'n'dirty testing during development.  Separate testing programs for systematic testing are a good idea to include in your module package.


Packaging
---------
  
If you have done everything as instructed here, creating a distributable python package can be done as follows:
  

::

  cd your_package_name
  python3 setup.py sdist

  
Your distributable python package is now in directory "dist/".  You can install it with:

:: 

  pip3 install --upgrade dist/your_package_name-version.tar.gz
    
The setup.py script automatically finds and includes python packages to the distribution package.  In "MANIFEST.in" we also tell it to include the complete "docs/" directory and an auxiliary file from the "greeters" submodule.  See "setup.py" for more instructions.

Polish your setup script with the following cycle:

::

  rm dist/*
  python3 setup.py sdist
  pip3 install --user --upgrade --verbose dist/your_package_name-version.tar.gz

The verbose option is nice to see any problems, with say, your post-installing script defined in setup.py.  Once you have got rid of all the errors, you can be sure that it works also when people install your python package directly from git using pip3. 

Package testing
---------------

When testing the pip3 installation, use virtualenv to see that you got the dependencies right.  First, create a virtualenv:

::

  virtualenv --no-site-packages -p python3 test

Then let's use that virtualenv (we also clean up PYTHONPATH) to test your production system:
  
::

  cd test
  source bin/activate
  export PYTHONPATH=
  pip3 install --user --upgrade git+git://[your-personal-git-repository]/your_package_name

See :ref:`here <started>` how the end-user would be using your python module directly from git.
  
To exit from virtualenv, use:

::
  
  deactivate


PyPi
----

By uploading your python package to PyPi (Python Package Index), end users can install it simply with

::

    pip3 install --user packagename
    
To use the python package repositories, follow these steps:
    
1. Create an account in `PyPi repository <https://pypi.org>`_ and in `PyPi test repository <https://testpypi.python.org>`_

2. Create file *$HOME/.pypirc* with the following contents:

::

    [distutils]
    index-servers =
        pypi
        test
        
    [pypi]
    username: xxx
    password: xxx

    [test]
    repository: https://test.pypi.org/legacy/
    username: xxx
    password: xxx


The modern way to connect safely to pypi, is via a token.  Then the ``pypi`` section looks like this:

::

    [pypi]
    username = __token__
    password = a_very_long_token

Get your token from pypi.org!

3. Install twine

::

    pip3 install --user twine

    
Now you can use the scripts *test_upload.bash* and *upload.bash* to send your package to the python (test) repository (first, edit those scripts).
  
To install from test repository (instead of the official one), use:
  
::

    pip3 install --user --extra-index-url https://testpypi.python.org/pypi packagename

  
Debian packaging
----------------

Create a .deb package like this:

::

    make -f debian/rules package


Uploading to an Ubuntu PPA
----------------------------

Start like this:

::

    debuild -S -sa

    
Now in the upper level directory you will have the file *skeleton_0.0.0-0ubuntu1-bionicppa1_source.changes*.  You can send it to your Ubuntu PPA (personal package archive) with:

::

    dput ppa:your-name/your-repo skeleton_0.0.0-0ubuntu1-bionicppa1_source.changes
  
  
Example snippets
----------------

The following python code can be downloaded from :download:`[here]<snippets/example1.py>`

.. include:: snippets/example1.py_

Check out directory "docs/snippets/".  It serves as a collection for small example programs.  Open and edit "form_snippets.bash" there.  You can then run it.  Remember to recompile the documentation once you've run that script.


Notebooks
---------

Go to directory ``notebook`` and run there:

::

    jupyter notebook

Open the "example" notebook.  Observe how neatly you can do interactive code development with notebooks.

  
Miscellaneous
-------------

* Check out in the source code, how I init and check a large number of parameters in the constructor
* To keep your code clean and PEP8 compliant, there's a nice tool called "autopep8", install with:

::
    
    pip3 install --user autopep8
    
Now you can fix a python file like this:
        
::

    autopep8 --aggressive --in-place yourfile.py
    

Internal links
--------------

Remember that reference we did up there?  Here is a :ref:`link <intro>` to it.


